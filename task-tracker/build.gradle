// adapted from addressbook level 4 

plugins {
    id "com.github.kt3k.coveralls" version "2.4.0"
    id "com.github.johnrengelman.shadow" version '1.2.3'
}


allprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'application'
	apply plugin: 'jacoco'
	apply plugin: 'idea'
	
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	
	repositories {
	    jcenter()
	    mavenCentral()
	}
		
	// This part is similar to global variables
	// Access them by using double-quoted strings (GStrings) and referencing by $ e.g. "Variable contains $Variable"
	project.ext {
	    controlsFxVersion = '8.40.11'
	    guavaVersion = '19.0'
	    jacksonVersion = '2.7.0'
		jacksonDataTypeVersion = '2.7.4'
		testFxVersion = '4.0.+'
		monocleVersion = '1.8.0_20'
		slf4jVersion = '1.7.21'
		junitVersion = '4.12'
		apacheCommonsLang = '3.5'
		prettyTimeVersion = '3.2.7.Final'
	}

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
	}
	
	dependencies {
	    compile "org.slf4j:slf4j-api:$slf4jVersion"
	    // compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
	    
	    testCompile 'junit:junit:$junitVersion'
	    testCompile "org.testfx:testfx-core:$testFxVersion"
	    testCompile "org.testfx:testfx-junit:$testFxVersion"
	    testCompile "org.testfx:testfx-legacy:$testFxVersion", {
	       exclude group: "junit", module: "junit"
	    }
	    testCompile "org.testfx:openjfx-monocle:$monocleVersion"
	    
	    compile "org.controlsfx:controlsfx:$controlsFxVersion"
	    
	    compile "com.google.guava:guava:$guavaVersion"
	    compile 'com.joestelmach:natty:0.12'
	    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonDataTypeVersion"
	    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
	    compile group: 'org.apache.commons', name: 'commons-lang3', version: "$apacheCommonsLang"
	    
	    testCompile files('libs/TrayNotification.jar')
	}
	
	sourceSets {
	    main {
	        java {
	            srcDir 'src/main/java'
	        }
	        resources {
	            srcDir 'src/main/resources'
	        }
	    }
	    
	    mainClassName = 'main.Main'
	}
	
    shadowJar {
        archiveName = "tasktracker.jar"

        manifest {
            attributes "Main-Class": "main.Main"
        }

        destinationDir = file("${buildDir}/jar/")
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

task coverage(type: JacocoReport) {
    sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(allprojects.sourceSets.main.output)
    executionData = files(allprojects.jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/coverage/coverage.xml"
}

tasks.coveralls {
    dependsOn coverage
    onlyIf { System.env.'CI' }
}


class TaskTrackerTest extends Test {
    public TaskTrackerTest() {
    	  forkEvery = 1
        systemProperty 'testfx.setup.timeout', '60000'
    }

    public void setHeadless() {
        systemProperty 'java.awt.robot', 'true'
        systemProperty 'testfx.robot', 'glass'
        systemProperty 'testfx.headless', 'true'
        systemProperty 'prism.order', 'sw'
        systemProperty 'prism.text', 't2k'
    }
}

task guiTests(type: TaskTrackerTest) {
    include 'guitests/**'

    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}


task nonGuiTests(type: TaskTrackerTest) {
    include 'main/**'

    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

// Test mode depends on whether headless task has been run
task allTests(type: TaskTrackerTest) {
    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task headless << {
    println "Setting headless mode properties."
    guiTests.setHeadless()
    nonGuiTests.setHeadless()
    allTests.setHeadless()
}

// Makes sure that headless properties are set before running tests
nonGuiTests.mustRunAfter headless
guiTests.mustRunAfter headless
allTests.mustRunAfter headless

defaultTasks 'clean', 'headless', 'allTests', 'coverage'